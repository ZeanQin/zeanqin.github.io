__NUXT_JSONP__("/articles/hashing", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x){return {data:[{article:{title:"What is hashing?",excerpt:"Basics of hashing.",category:null,tags:["Hashing","Algorithm"],createdAt:"2017-08-05T14:00:00.000Z",updatedAt:"2020-08-16T05:39:18.310Z",enableComments:n,enableTOC:n,toc:[{id:o,depth:f,text:p},{id:q,depth:f,text:r},{id:s,depth:f,text:t},{id:u,depth:f,text:v}],body:{type:"root",children:[{type:b,tag:g,props:{id:o},children:[{type:b,tag:e,props:{href:"#what-is-hashing",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:p}]},{type:a,value:c},{type:b,tag:m,props:{},children:[{type:a,value:"A hash is like a fingerprint for data. A hash function takes your data — which can be any length — as an input, and gives you back an identifier of a smaller (usually), fixed (usually) length, which you can use to index or compare or identify the data."}]},{type:a,value:c},{type:b,tag:"blockquote",props:{},children:[{type:a,value:c},{type:b,tag:m,props:{},children:[{type:a,value:"Intuition: a hash function builds a (sometimes not strict, i.e. collision) one-to-one relationship between a piece of data and a number"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:m,props:{},children:[{type:a,value:"A sample hash can be: "},{type:b,tag:"code",props:{},children:[{type:a,value:"b3f9b3a3504ccb29c4183730a42c8d56"}]}]},{type:a,value:c},{type:b,tag:g,props:{id:q},children:[{type:b,tag:e,props:{href:"#properties-of-hash-functions",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:r}]},{type:a,value:c},{type:b,tag:w,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The same input always hash to the same identifier"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Most hash functions are one-way operations, which is to say you can figure out an identifier from the data, but you typically can’t do the reverse."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Ideally, the output values should be distributed uniformly — that is, each possible output should be equally likely"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"For a lot of use-cases it is also important that the outputs be distributed randomly; similar inputs should not give similar outputs."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"For some use-cases — usually in security — it is also important to minimise collisions, meaning, as far as possible, each input should give a unique output."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Finally, in most cases (though not always), you want it to be fast."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:g,props:{id:s},children:[{type:b,tag:e,props:{href:"#common-hashing-algorithms",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:t}]},{type:a,value:c},{type:b,tag:m,props:{},children:[{type:a,value:"There are literally thousands of named hashing functions. Some are secure, but comparatively slow to calculate. Some are very fast, but have more collisions. Some are close to perfectly uniformly distributed, but very hard to implement. You get the idea. If there’s one rule in programming it’s this: there will always be trade-offs."}]},{type:a,value:c},{type:b,tag:w,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"SHA-1 — Secure Hash Algorithm — was devised by the NSA, and for a long time was used to secure lots of Internet communication."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"MD5 is another popular one, often used to prove that the file you’re downloading is the one you think it is."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"CityHash"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"MurmurHash"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"SpookyHash"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:g,props:{id:u},children:[{type:b,tag:e,props:{href:"#references",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:v}]},{type:a,value:c},{type:b,tag:"ol",props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:e,props:{href:x,rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:a,value:x}]}]},{type:a,value:c}]}]},dir:"\u002Farticles",path:"\u002Farticles\u002Fhashing",extension:".md",slug:"hashing"}}],fetch:[],mutations:void 0}}("text","element","\n","li","a",2,"h2","true",-1,"span","icon","icon-link","p",true,"what-is-hashing","What is Hashing","properties-of-hash-functions","Properties of Hash Functions","common-hashing-algorithms","Common Hashing Algorithms","references","References","ul","https:\u002F\u002Fblog.medium.com\u002Fwhat-are-bloom-filters-1ec2a50c68ff")));